// ---------------------------
// Create Microservice nodes
// ---------------------------
MERGE (catalog:Microservice {name: 'CatalogService', technology: 'Java'})
MERGE (order:Microservice {name: 'OrderService', technology: 'Python'})
MERGE (user:Microservice {name: 'UserService', technology: 'Go'})
MERGE (payment:Microservice {name: 'PaymentService', technology: 'Node.js'})
MERGE (inventory:Microservice {name: 'InventoryService', technology: 'Java'})
MERGE (shipping:Microservice {name: 'ShippingService', technology: 'Python'})
MERGE (review:Microservice {name: 'ReviewService', technology: 'Go'})
MERGE (recommendation:Microservice {name: 'RecommendationService', technology: 'Node.js'})
MERGE (auth:Microservice {name: 'AuthService', technology: 'Node.js'})
MERGE (cache:Microservice {name: 'Cache', technology: 'In-memory'})
MERGE (mq:Microservice {name: 'MessageQueue', technology: 'Pub-Sub'})

//---------------------
// Dependency
//---------------------
MERGE (db:Dependency {name: 'Database', technology: 'SQL'})
MERGE (api:Dependency {name: 'ExternalAPI', technology: 'REST'})

// ---------------------------
// Create Task nodes
// ---------------------------
MERGE (bugFixCatalog:Task {
  name: 'BugFix', 
  description: 'Address and resolve a critical bug impacting the CatalogService, affecting the user interface and experience, and hampering the overall performance and responsiveness of the service.', 
  status: 'open'
})
MERGE (featureAddOrder:Task {
  name: 'FeatureAdd', 
  description: 'Implement a new feature in OrderService to facilitate bulk orders, ensuring the features seamless integration with existing functionalities and maintaining the overall stability and performance of the service.', 
  status: 'in progress'
})

MERGE (refactorUser:Task {
  name: 'Refactor', 
  description: 'Refactor the UserService codebase to enhance its readability, maintainability, and scalability, focusing primarily on modularization and optimization of existing functionalities.', 
  status: 'completed'
})

MERGE (optimizePayment:Task {
  name: 'Optimize', 
  description: 'Optimize PaymentService by refining the transaction processing logic, reducing the service’s latency, and improving its reliability and efficiency in handling transactions.', 
  status: 'open'
})

MERGE (updateInventory:Task {
  name: 'Update', 
  description: 'Update InventoryService to include real-time stock updates, ensuring accurate reflection of the inventory levels and aiding in the efficient management of stock.', 
  status: 'in progress'
})

MERGE (enhanceShipping:Task {
  name: 'Enhance', 
  description: 'Enhance the ShippingService by integrating a new shipping partner API, thereby expanding the shipping options available to the customers and improving the overall delivery experience.', 
  status: 'completed'
})

MERGE (reviewFix:Task {
  name: 'ReviewFix', 
  description: 'Rectify a recurring issue in ReviewService affecting the retrieval of user reviews, by refining the service’s logic and improving its efficiency in handling and displaying user reviews.', 
  status: 'open'
})

MERGE (recommendationFeature:Task {
  name: 'RecommendationFeature', 
  description: 'Add a new feature to RecommendationService to provide more personalized and accurate product recommendations to the users, leveraging user behavior and preference data.', 
  status: 'in progress'
})

MERGE (optimizeAuth:Task {
  name: 'Optimize', 
  description: 'Enhance AuthService’s performance and security by optimizing the authentication mechanisms and implementing additional security measures to safeguard user information.', 
  status: 'open'
})

MERGE (newTask:Task {
  name: 'ImproveSecurity', 
  description: 'Enhance the security of microservices by implementing advanced encryption and securing endpoints.', 
  status: 'open'
})

// ---------------------------
// Create Team nodes
// ---------------------------
MERGE (teamA:Team {name: 'TeamA'})
MERGE (teamB:Team {name: 'TeamB'})
MERGE (teamC:Team {name: 'TeamC'})
MERGE (teamD:Team {name: 'TeamD'})

// ---------------------------
// Create Person nodes
// ---------------------------
MERGE (alice:Person {name: 'Alice'})
MERGE (bob:Person {name: 'Bob'})
MERGE (charlie:Person {name: 'Charlie'})
MERGE (diana:Person {name: 'Diana'})
MERGE (eva:Person {name: 'Eva'})
MERGE (frank:Person {name: 'Frank'})

// ----------------------------------------
// Create DEPENDS_ON relationships for Dependency
// ----------------------------------------
MERGE (catalog)-[:DEPENDS_ON]->(db)
MERGE (order)-[:DEPENDS_ON]->(db)
MERGE (user)-[:DEPENDS_ON]->(db)
MERGE (payment)-[:DEPENDS_ON]->(db)
MERGE (inventory)-[:DEPENDS_ON]->(db)
MERGE (shipping)-[:DEPENDS_ON]->(mq)
MERGE (review)-[:DEPENDS_ON]->(cache)
MERGE (recommendation)-[:DEPENDS_ON]->(api)
MERGE (auth)-[:DEPENDS_ON]->(db)

// Additional DEPENDS_ON relationships among Microservices
MERGE (order)-[:DEPENDS_ON]->(inventory)
MERGE (order)-[:DEPENDS_ON]->(shipping)
MERGE (order)-[:DEPENDS_ON]->(payment)
MERGE (catalog)-[:DEPENDS_ON]->(review)
MERGE (catalog)-[:DEPENDS_ON]->(recommendation)
MERGE (user)-[:DEPENDS_ON]->(auth)
MERGE (payment)-[:DEPENDS_ON]->(auth)
MERGE (shipping)-[:DEPENDS_ON]->(auth)

// ----------------------------------------
// Assign People to Teams
// ----------------------------------------
MERGE (alice)-[:PART_OF]->(teamA)
MERGE (bob)-[:PART_OF]->(teamB)
MERGE (charlie)-[:PART_OF]->(teamC)
MERGE (diana)-[:PART_OF]->(teamD)
MERGE (eva)-[:PART_OF]->(teamA)
MERGE (frank)-[:PART_OF]->(teamB)

// ----------------------------------------
// Create MAINTAINED_BY relationships between Microservices and Teams
// ----------------------------------------
MERGE (catalog)-[:MAINTAINED_BY]->(alice)
MERGE (order)-[:MAINTAINED_BY]->(bob)
MERGE (user)-[:MAINTAINED_BY]->(charlie)
MERGE (payment)-[:MAINTAINED_BY]->(diana)
MERGE (inventory)-[:MAINTAINED_BY]->(diana)
MERGE (shipping)-[:MAINTAINED_BY]->(frank)
MERGE (review)-[:MAINTAINED_BY]->(charlie)
MERGE (recommendation)-[:MAINTAINED_BY]->(diana)
MERGE (auth)-[:MAINTAINED_BY]->(eva)

// ----------------------------------------
// Create ASSIGNED_TO relationships between Tasks and Teams
// ----------------------------------------
MERGE (bugFixCatalog)-[:ASSIGNED_TO]->(alice)
MERGE (featureAddOrder)-[:ASSIGNED_TO]->(bob)
MERGE (refactorUser)-[:ASSIGNED_TO]->(charlie)
MERGE (optimizePayment)-[:ASSIGNED_TO]->(diana)
MERGE (updateInventory)-[:ASSIGNED_TO]->(diana)
MERGE (enhanceShipping)-[:ASSIGNED_TO]->(frank)
MERGE (reviewFix)-[:ASSIGNED_TO]->(charlie)
MERGE (recommendationFeature)-[:ASSIGNED_TO]->(diana)
MERGE (optimizeAuth)-[:ASSIGNED_TO]->(eva)

// ----------------------------------------
// Link Tasks to their respective Microservices
// ----------------------------------------
MERGE (bugFixCatalog)-[:LINKED_TO]->(catalog)
MERGE (featureAddOrder)-[:LINKED_TO]->(order)
MERGE (refactorUser)-[:LINKED_TO]->(user)
MERGE (optimizePayment)-[:LINKED_TO]->(payment)
MERGE (updateInventory)-[:LINKED_TO]->(inventory)
MERGE (enhanceShipping)-[:LINKED_TO]->(shipping)
MERGE (reviewFix)-[:LINKED_TO]->(review)
MERGE (recommendationFeature)-[:LINKED_TO]->(recommendation)
MERGE (optimizeAuth)-[:LINKED_TO]->(auth)
MERGE (newTask)-[:LINKED_TO]->(auth)
MERGE (newTask)-[:ASSIGNED_TO]->(teamA)

// ----------------------------------------
// Create additional dependency relationships among Tasks (example dependencies)
// ----------------------------------------
MERGE (featureAddOrder)-[:DEPENDS_ON]->(bugFixCatalog)
MERGE (enhanceShipping)-[:DEPENDS_ON]->(updateInventory)